/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IFundToken {
  export type FundMetricsStruct = {
    totalAssetValue: BigNumberish;
    sharesSupply: BigNumberish;
    lastUpdateTime: BigNumberish;
  };

  export type FundMetricsStructOutput = [
    totalAssetValue: bigint,
    sharesSupply: bigint,
    lastUpdateTime: bigint
  ] & { totalAssetValue: bigint; sharesSupply: bigint; lastUpdateTime: bigint };
}

export interface IFundTokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "balanceOf"
      | "getFundMetrics"
      | "getSharePrice"
      | "invest"
      | "redeem"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Investment" | "MetricsUpdated" | "Redemtion"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFundMetrics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSharePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "invest",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFundMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSharePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "invest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
}

export namespace InvestmentEvent {
  export type InputTuple = [
    investor: AddressLike,
    usdAmount: BigNumberish,
    sharesIssued: BigNumberish,
    sharePrice: BigNumberish
  ];
  export type OutputTuple = [
    investor: string,
    usdAmount: bigint,
    sharesIssued: bigint,
    sharePrice: bigint
  ];
  export interface OutputObject {
    investor: string;
    usdAmount: bigint;
    sharesIssued: bigint;
    sharePrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetricsUpdatedEvent {
  export type InputTuple = [
    totalAssetValue: BigNumberish,
    sharesSupply: BigNumberish,
    sharePrice: BigNumberish
  ];
  export type OutputTuple = [
    totalAssetValue: bigint,
    sharesSupply: bigint,
    sharePrice: bigint
  ];
  export interface OutputObject {
    totalAssetValue: bigint;
    sharesSupply: bigint;
    sharePrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedemtionEvent {
  export type InputTuple = [
    investor: AddressLike,
    shares: BigNumberish,
    usdAmount: BigNumberish,
    sharePrice: BigNumberish
  ];
  export type OutputTuple = [
    investor: string,
    shares: bigint,
    usdAmount: bigint,
    sharePrice: bigint
  ];
  export interface OutputObject {
    investor: string;
    shares: bigint;
    usdAmount: bigint;
    sharePrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IFundToken extends BaseContract {
  connect(runner?: ContractRunner | null): IFundToken;
  waitForDeployment(): Promise<this>;

  interface: IFundTokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  balanceOf: TypedContractMethod<[investor: AddressLike], [bigint], "view">;

  getFundMetrics: TypedContractMethod<
    [],
    [IFundToken.FundMetricsStructOutput],
    "view"
  >;

  getSharePrice: TypedContractMethod<[], [bigint], "view">;

  invest: TypedContractMethod<
    [investor: AddressLike, usdAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  redeem: TypedContractMethod<
    [investor: AddressLike, shares: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[investor: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFundMetrics"
  ): TypedContractMethod<[], [IFundToken.FundMetricsStructOutput], "view">;
  getFunction(
    nameOrSignature: "getSharePrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "invest"
  ): TypedContractMethod<
    [investor: AddressLike, usdAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeem"
  ): TypedContractMethod<
    [investor: AddressLike, shares: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "Investment"
  ): TypedContractEvent<
    InvestmentEvent.InputTuple,
    InvestmentEvent.OutputTuple,
    InvestmentEvent.OutputObject
  >;
  getEvent(
    key: "MetricsUpdated"
  ): TypedContractEvent<
    MetricsUpdatedEvent.InputTuple,
    MetricsUpdatedEvent.OutputTuple,
    MetricsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Redemtion"
  ): TypedContractEvent<
    RedemtionEvent.InputTuple,
    RedemtionEvent.OutputTuple,
    RedemtionEvent.OutputObject
  >;

  filters: {
    "Investment(address,uint256,uint256,uint256)": TypedContractEvent<
      InvestmentEvent.InputTuple,
      InvestmentEvent.OutputTuple,
      InvestmentEvent.OutputObject
    >;
    Investment: TypedContractEvent<
      InvestmentEvent.InputTuple,
      InvestmentEvent.OutputTuple,
      InvestmentEvent.OutputObject
    >;

    "MetricsUpdated(uint256,uint256,uint256)": TypedContractEvent<
      MetricsUpdatedEvent.InputTuple,
      MetricsUpdatedEvent.OutputTuple,
      MetricsUpdatedEvent.OutputObject
    >;
    MetricsUpdated: TypedContractEvent<
      MetricsUpdatedEvent.InputTuple,
      MetricsUpdatedEvent.OutputTuple,
      MetricsUpdatedEvent.OutputObject
    >;

    "Redemtion(address,uint256,uint256,uint256)": TypedContractEvent<
      RedemtionEvent.InputTuple,
      RedemtionEvent.OutputTuple,
      RedemtionEvent.OutputObject
    >;
    Redemtion: TypedContractEvent<
      RedemtionEvent.InputTuple,
      RedemtionEvent.OutputTuple,
      RedemtionEvent.OutputObject
    >;
  };
}
